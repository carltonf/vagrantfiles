# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrant file for trying out ceph-ansible locally

require 'yaml'
require 'time'

config_file=File.expand_path(File.join( File.dirname(__FILE__), 'vagrant_variables.yml' ))
settings=YAML.load_file(config_file)

LABEL_PREFIX    = settings['label_prefix'] ? settings['label_prefix'] + "-" : ""
NMONS           = settings['mon_vms']
NOSDS           = settings['osd_vms']
NMDSS           = settings['mds_vms']
NRGWS           = settings['rgw_vms']
NNFSS           = settings['nfs_vms']
RESTAPI         = settings['restapi']
NRBD_MIRRORS    = settings['rbd_mirror_vms']
CLIENTS         = settings['client_vms']
NISCSI_GWS      = settings['iscsi_gw_vms']
MGRS            = settings['mgr_vms']
PUBLIC_SUBNET   = settings['public_subnet']
CLUSTER_SUBNET  = settings['cluster_subnet']
BOX             = settings['vagrant_box']
BOX_URL         = settings['vagrant_box_url']
SYNC_DIR        = settings['vagrant_sync_dir']
MEMORY          = settings['memory']
ETH             = settings['eth']
USER            = settings['ssh_username']
DEBUG           = settings['debug']

# TODO how does this impact the rest of the setup
ASSIGN_STATIC_IP = false
DISABLE_SYNCED_FOLDER = settings.fetch('vagrant_disable_synced_folder', false)
DISK_UUID = Time.now.utc.to_i

# Much to do

# [ ] Simplify the standard Vagrantfile: only VirtualBox anyway
# [ ] adapt the provision ansible to use crystal as control machine

# TODO the whole write to the inventory from Vagrantfile thing feels repeated,
# most configurations are read from #{config_file} anyway
generate_ansible_inventory = proc do
  # Empty the file
  File.open('./inventory.ini', 'w') do
    puts ""
  end
  File.open('./inventory.ini', 'a') do |f|
    ### Groups
    f.puts '[mons]'
    (0..NMONS - 1).map { |j| f.puts "#{LABEL_PREFIX}mon#{j}" }
    f.puts '[osds]'
    (0..NOSDS - 1).map { |j| f.puts "#{LABEL_PREFIX}osd#{j}" }
    f.puts '[mdss]'
    (0..NMDSS - 1).map { |j| f.puts "#{LABEL_PREFIX}mds#{j}" }
    f.puts '[rgws]'
    (0..NRGWS - 1).map { |j| f.puts "#{LABEL_PREFIX}rgw#{j}" }
    f.puts '[nfss]'
    (0..NNFSS - 1).map { |j| f.puts "#{LABEL_PREFIX}nfs#{j}" }
    f.puts '[rbd_mirrors]'
    (0..NRBD_MIRRORS - 1).map { |j| f.puts "#{LABEL_PREFIX}rbd_mirror#{j}" }
    f.puts '[clients]'
    (0..CLIENTS - 1).map { |j| f.puts "#{LABEL_PREFIX}client#{j}" }
    f.puts '[iscsi_gw]'
    (0..NISCSI_GWS - 1).map { |j| f.puts "#{LABEL_PREFIX}iscsi_gw#{j}" }
    f.puts '[mgrs]'
    (0..MGRS - 1).map { |j| f.puts "#{LABEL_PREFIX}mgr#{j}" }
    if RESTAPI then
      f.puts '[restapis]'
      (0..NMONS - 1).map { |j| f.puts "#{LABEL_PREFIX}mon#{j}" }
    end

    ### Vars
    # TODO a separate file?
    f.puts <<EXTRA_VARS

[all:vars]
cluster_network: "#{CLUSTER_SUBNET}.0/24",
journal_size: 100,
public_network: "#{PUBLIC_SUBNET}.0/24",
devices: #{ settings['disks'] },
journal_collocation: 'true',
monitor_interface: #{ETH},
os_tuning_params: #{ settings['os_tuning_params'] },
pool_default_size: '2',

EXTRA_VARS
  end
end

# NOTE: `vagrant validate` is enough to have this script executed
generate_ansible_inventory.call

Vagrant.configure(2) do |config|
  config.vm.box = BOX
  config.vm.box_url = BOX_URL
  # workaround for https://github.com/mitchellh/vagrant/issues/5048
  config.ssh.insert_key = false
  config.ssh.private_key_path = settings['ssh_private_key_path']
  config.ssh.username = USER

  # Faster bootup. Disables mounting the sync folder for libvirt and virtualbox
  config.vm.provider :virtualbox do |v,override|
    override.vm.synced_folder '.', SYNC_DIR, disabled: true
  end

  (0..MGRS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}mgr#{i}" do |mgr|
      mgr.vm.hostname = "#{LABEL_PREFIX}ceph-mgr#{i}"
      if ASSIGN_STATIC_IP
        mgr.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.3#{i}"
      end
      # Virtualbox
      mgr.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end
    end
  end

  (0..CLIENTS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}client#{i}" do |client|
      client.vm.hostname = "#{LABEL_PREFIX}ceph-client#{i}"
      if ASSIGN_STATIC_IP
        client.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.4#{i}"
      end
      # Virtualbox
      client.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end

    end
  end

  (0..NRGWS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}rgw#{i}" do |rgw|
      rgw.vm.hostname = "#{LABEL_PREFIX}ceph-rgw#{i}"
      if ASSIGN_STATIC_IP
        rgw.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.5#{i}"
      end

      # Virtualbox
      rgw.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end
    end
  end

  (0..NNFSS - 1).each do |i|
    config.vm.define "nfs#{i}" do |nfs|
      nfs.vm.hostname = "ceph-nfs#{i}"
      if ASSIGN_STATIC_IP
        nfs.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.6#{i}"
      end

    end
  end

  (0..NMDSS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}mds#{i}" do |mds|
      mds.vm.hostname = "#{LABEL_PREFIX}ceph-mds#{i}"
      if ASSIGN_STATIC_IP
        mds.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.7#{i}"
      end
      # Virtualbox
      mds.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end
    end
  end

  (0..NRBD_MIRRORS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}rbd_mirror#{i}" do |rbd_mirror|
      rbd_mirror.vm.hostname = "#{LABEL_PREFIX}ceph-rbd-mirror#{i}"
      if ASSIGN_STATIC_IP
        rbd_mirror.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.8#{i}"
      end
      # Virtualbox
      rbd_mirror.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end

    end
  end

  (0..NISCSI_GWS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}iscsi_gw#{i}" do |iscsi_gw|
      iscsi_gw.vm.hostname = "#{LABEL_PREFIX}ceph-iscsi-gw#{i}"
      if ASSIGN_STATIC_IP
        iscsi_gw.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.9#{i}"
      end
      # Virtualbox
      iscsi_gw.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end

    end
  end

  (0..NMONS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}mon#{i}" do |mon|
      mon.vm.hostname = "#{LABEL_PREFIX}ceph-mon#{i}"
      if ASSIGN_STATIC_IP
        mon.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.1#{i}"
      end
      # Virtualbox
      mon.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end

    end
  end

  (0..NOSDS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}osd#{i}" do |osd|
      osd.vm.hostname = "#{LABEL_PREFIX}ceph-osd#{i}"
      if ASSIGN_STATIC_IP
        osd.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.10#{i}"
        osd.vm.network :private_network,
          ip: "#{CLUSTER_SUBNET}.20#{i}"
      end
      # Virtualbox
      osd.vm.provider :virtualbox do |vb|
        # Create our own controller for consistency and to remove VM dependency
        vb.customize ['storagectl', :id,
                      '--name', 'OSD Controller',
                      '--add', 'scsi']
        (0..1).each do |d|
          vb.customize ['createhd',
                        '--filename', "disk-#{i}-#{d}",
                        '--size', '11000'] unless File.exist?("disk-#{i}-#{d}.vdi")
          vb.customize ['storageattach', :id,
                        '--storagectl', 'OSD Controller',
                        '--port', 3 + d,
                        '--device', 0,
                        '--type', 'hdd',
                        '--medium', "disk-#{i}-#{d}.vdi"]
        end
        vb.customize ['modifyvm', :id, '--memory', "#{MEMORY}"]
      end

    end
  end
end
